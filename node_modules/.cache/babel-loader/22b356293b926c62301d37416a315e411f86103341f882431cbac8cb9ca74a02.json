{"ast":null,"code":"var _jsxFileName = \"/home/ajitha/Assist/React/weather-api/src/Search.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport Geocode from 'react-geocode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherSearch = () => {\n  _s();\n  const [location, setLocation] = useState('');\n  const [latitude, setLatitude] = useState('');\n  const [longitude, setLongitude] = useState('');\n  const [weatherData, setWeatherData] = useState(null);\n  Geocode.setApiKey('AIzaSyBwbTOdc6sprj3m_3AM2UfOo8XMU4hzfOQ');\n  const getCoordinates = async location => {\n    try {\n      const response = await Geocode.fromAddress(location);\n      const {\n        lat,\n        lng\n      } = response.results[0].geometry.location;\n      console.log('Latitude:', lat);\n      console.log('Longitude:', lng);\n      // Use the latitude and longitude as needed\n    } catch (error) {\n      console.error('Error fetching coordinates:', error);\n    }\n  };\n  const handleLocationSearch = () => {\n    const location = 'Chennai'; // Replace with the location from your search box\n    getCoordinates(location);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: location,\n      onChange: e => setLocation(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLocationSearch,\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherSearch, \"p4NDT96fTTEUqrOXMxyMo+mzT6k=\");\n_c = WeatherSearch;\nexport default WeatherSearch;\nvar _c;\n$RefreshReg$(_c, \"WeatherSearch\");","map":{"version":3,"names":["React","Geocode","jsxDEV","_jsxDEV","WeatherSearch","_s","location","setLocation","useState","latitude","setLatitude","longitude","setLongitude","weatherData","setWeatherData","setApiKey","getCoordinates","response","fromAddress","lat","lng","results","geometry","console","log","error","handleLocationSearch","children","type","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/ajitha/Assist/React/weather-api/src/Search.js"],"sourcesContent":["import React from 'react';\nimport Geocode from 'react-geocode';\n\n\n\n\nconst WeatherSearch = () => {\n  const [location, setLocation] = useState('');\n  const [latitude, setLatitude] = useState('');\n  const [longitude, setLongitude] = useState('');\n  const [weatherData, setWeatherData] = useState(null);\n  Geocode.setApiKey('AIzaSyBwbTOdc6sprj3m_3AM2UfOo8XMU4hzfOQ');\n\nconst getCoordinates = async (location) => {\n  try {\n    const response = await Geocode.fromAddress(location);\n    const { lat, lng } = response.results[0].geometry.location;\n    console.log('Latitude:', lat);\n    console.log('Longitude:', lng);\n    // Use the latitude and longitude as needed\n  } catch (error) {\n    console.error('Error fetching coordinates:', error);\n  }\n};\n\nconst handleLocationSearch = () => {\n  const location = 'Chennai'; // Replace with the location from your search box\n  getCoordinates(location);\n};\n\n  return (\n    <div>\n      <input type=\"text\" value={location} onChange={(e) => setLocation(e.target.value)} />\n      <button onClick={handleLocationSearch}>Search</button>\n      {/* Display weather data here */}\n    </div>\n  );\n};\n\nexport default WeatherSearch;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAKpC,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGF,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACG,SAAS,EAAEC,YAAY,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACK,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACpDP,OAAO,CAACc,SAAS,CAAC,yCAAyC,CAAC;EAE9D,MAAMC,cAAc,GAAG,MAAOV,QAAQ,IAAK;IACzC,IAAI;MACF,MAAMW,QAAQ,GAAG,MAAMhB,OAAO,CAACiB,WAAW,CAACZ,QAAQ,CAAC;MACpD,MAAM;QAAEa,GAAG;QAAEC;MAAI,CAAC,GAAGH,QAAQ,CAACI,OAAO,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAChB,QAAQ;MAC1DiB,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEL,GAAG,CAAC;MAC7BI,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEJ,GAAG,CAAC;MAC9B;IACF,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD;EACF,CAAC;EAED,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;IACjC,MAAMpB,QAAQ,GAAG,SAAS,CAAC,CAAC;IAC5BU,cAAc,CAACV,QAAQ,CAAC;EAC1B,CAAC;EAEC,oBACEH,OAAA;IAAAwB,QAAA,gBACExB,OAAA;MAAOyB,IAAI,EAAC,MAAM;MAACC,KAAK,EAAEvB,QAAS;MAACwB,QAAQ,EAAGC,CAAC,IAAKxB,WAAW,CAACwB,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACpFjC,OAAA;MAAQkC,OAAO,EAAEX,oBAAqB;MAAAC,QAAA,EAAC;IAAM;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEnD,CAAC;AAEV,CAAC;AAAC/B,EAAA,CA/BID,aAAa;AAAAkC,EAAA,GAAblC,aAAa;AAiCnB,eAAeA,aAAa;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}