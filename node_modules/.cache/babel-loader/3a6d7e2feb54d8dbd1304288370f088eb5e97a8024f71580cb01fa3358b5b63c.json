{"ast":null,"code":"var _jsxFileName = \"/home/ajitha/Assist/React/weather-api/src/Search.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherSearch = () => {\n  _s();\n  const [location, setLocation] = useState('');\n  const [latitude, setLatitude] = useState('');\n  const [longitude, setLongitude] = useState('');\n  const [weatherData, setWeatherData] = useState(null);\n  const API_KEY = 'c910ec3f3e70722b68f4406733ccac23';\n  const google_Api_Key = 'AIzaSyBwbTOdc6sprj3m_3AM2UfOo8XMU4hzfOQ';\n  const fetchCoordinates = async () => {\n    const geocodeUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(location)}&key=${google_Api_Key}`;\n    try {\n      const response = await axios.get(geocodeUrl);\n      const {\n        results\n      } = response.data;\n      if (results.length > 0) {\n        const {\n          lat,\n          lng\n        } = results[0].geometry.location;\n        setLatitude(lat);\n        setLongitude(lng);\n      } else {\n        console.error('Location not found');\n      }\n    } catch (error) {\n      console.error('Error fetching location data:', error);\n    }\n  };\n  const handleLocationSearch = () => {\n    fetchCoordinates();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: location,\n      onChange: e => setLocation(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLocationSearch,\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherSearch, \"p4NDT96fTTEUqrOXMxyMo+mzT6k=\");\n_c = WeatherSearch;\nexport default WeatherSearch;\nvar _c;\n$RefreshReg$(_c, \"WeatherSearch\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","WeatherSearch","_s","location","setLocation","latitude","setLatitude","longitude","setLongitude","weatherData","setWeatherData","API_KEY","google_Api_Key","fetchCoordinates","geocodeUrl","encodeURIComponent","response","get","results","data","length","lat","lng","geometry","console","error","handleLocationSearch","children","type","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/ajitha/Assist/React/weather-api/src/Search.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\nconst WeatherSearch = () => {\n  const [location, setLocation] = useState('');\n  const [latitude, setLatitude] = useState('');\n  const [longitude, setLongitude] = useState('');\n  const [weatherData, setWeatherData] = useState(null);\n  const API_KEY = 'c910ec3f3e70722b68f4406733ccac23';\n  const google_Api_Key = 'AIzaSyBwbTOdc6sprj3m_3AM2UfOo8XMU4hzfOQ';\n\n  const fetchCoordinates = async () => {\n    const geocodeUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(\n      location\n    )}&key=${google_Api_Key}`;\n\n    try {\n      const response = await axios.get(geocodeUrl);\n      const { results } = response.data;\n\n      if (results.length > 0) {\n        const { lat, lng } = results[0].geometry.location;\n        setLatitude(lat);\n        setLongitude(lng);\n      } else {\n        console.error('Location not found');\n      }\n    } catch (error) {\n      console.error('Error fetching location data:', error);\n    }\n  };\n\n  const handleLocationSearch = () => {\n    fetchCoordinates();\n  };\n\n  return (\n    <div>\n      <input type=\"text\" value={location} onChange={(e) => setLocation(e.target.value)} />\n      <button onClick={handleLocationSearch}>Search</button>\n      {/* Display weather data here */}\n    </div>\n  );\n};\n\nexport default WeatherSearch;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAMc,OAAO,GAAG,kCAAkC;EAClD,MAAMC,cAAc,GAAG,yCAAyC;EAEhE,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,MAAMC,UAAU,GAAI,6DAA4DC,kBAAkB,CAChGZ,QACF,CAAE,QAAOS,cAAe,EAAC;IAEzB,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,GAAG,CAACH,UAAU,CAAC;MAC5C,MAAM;QAAEI;MAAQ,CAAC,GAAGF,QAAQ,CAACG,IAAI;MAEjC,IAAID,OAAO,CAACE,MAAM,GAAG,CAAC,EAAE;QACtB,MAAM;UAAEC,GAAG;UAAEC;QAAI,CAAC,GAAGJ,OAAO,CAAC,CAAC,CAAC,CAACK,QAAQ,CAACpB,QAAQ;QACjDG,WAAW,CAACe,GAAG,CAAC;QAChBb,YAAY,CAACc,GAAG,CAAC;MACnB,CAAC,MAAM;QACLE,OAAO,CAACC,KAAK,CAAC,oBAAoB,CAAC;MACrC;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACvD;EACF,CAAC;EAED,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;IACjCb,gBAAgB,CAAC,CAAC;EACpB,CAAC;EAED,oBACEb,OAAA;IAAA2B,QAAA,gBACE3B,OAAA;MAAO4B,IAAI,EAAC,MAAM;MAACC,KAAK,EAAE1B,QAAS;MAAC2B,QAAQ,EAAGC,CAAC,IAAK3B,WAAW,CAAC2B,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACpFpC,OAAA;MAAQqC,OAAO,EAAEX,oBAAqB;MAAAC,QAAA,EAAC;IAAM;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEnD,CAAC;AAEV,CAAC;AAAClC,EAAA,CAxCID,aAAa;AAAAqC,EAAA,GAAbrC,aAAa;AA0CnB,eAAeA,aAAa;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}